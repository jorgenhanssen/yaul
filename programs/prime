// A simple program to check if a number is prime
// outputs 1 if prime, 0 if not

// User inputs a number to check (reg 1)
in 1

// Set variables
set '1' 2       // reg 2 holds if the number is prime, we assume it is so we put 1 
set '3' 3       // iterator start-value stored in reg 3
set '2' 4       // iterator increment value stored in reg 4
div 1 4 5       // max iterator value (num/2)

mod 1 4 6             // the modulo of the input number and iterator value is stored in 6. We start to check if the number is divisible by 2
set '0' 7             // used as reference for modulo. If a module is 0 (which is stored here), then a number is not prime
jeq 6 7 NOTPRIME      // if the input number is divisible by the current iterator value then jump to 14

// Loop and check if the number is prime
LOOP:
mod 1 3 6             // insert the modulo of the input number vs iterator number in 6.
jeq 6 7 NOTPRIME      // if the input number is divisible by the current iterator value then jump to 14
add 3 4 3             // increment the iterator value by the iterator increment value.
jlt 3 5 LOOP          // if the iterator has not reached the max iterator value, jump to start

jmp PRINT // The number is prime, jump to print

// Jump here if the number is NOT prime
NOTPRIME:
set '0' 2

// Output the result
PRINT:
out 2