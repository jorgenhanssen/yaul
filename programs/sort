// Probably not the most efficient code that sorts an array of length 5.

// Initialize an array with length 5
set '5' 0
set '8' 1
set '3' 2
set '7' 3
set '1' 4

// main program
call PRINT_ARRAY
call SORT_ARRAY
call PRINT_ARRAY
term

// Function that prints the array
PRINT_ARRAY:
out 0
out 1
out 2
out 3
out 4
ret

// Function that sorts the array
SORT_ARRAY:
set '0' 11 // loop A index
set '1' 12 // loop A index+1
set '0' 13 // loop B index
set '1' 21 // loop increment
set '5' 22 // loop max index

SORT_ARRAY_LOOP:
jeq 12 22 SORT_ARRAY_LOOP_OUTER_END

jgt &11 &12 SORT_ARRAY_SWAP
jmp SORT_ARRAY_LOOP_INNER_END

SORT_ARRAY_SWAP:
mov 11 100
mov 12 101
call SWAP

SORT_ARRAY_LOOP_INNER_END:
add 21 11 11
add 21 12 12
jmp SORT_ARRAY_LOOP

SORT_ARRAY_LOOP_OUTER_END:
jeq 13 22 SORT_ARRAY_EXIT
set '0' 11 // reset inner loop index
set '1' 12 // reset inner loop index+1
add 21 13 13  // increment outer loop
jmp SORT_ARRAY_LOOP

SORT_ARRAY_EXIT:
ret

// Function that swaps two values in an array
// Dedicated registers:
// - 100: first variable to swap
// - 101: second variable to swap
// - 102: internal use
SWAP:
mov &100 102
mov &101 &100
mov 102 &101
ret